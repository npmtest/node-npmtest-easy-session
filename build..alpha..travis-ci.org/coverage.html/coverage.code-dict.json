{"/home/travis/build/npmtest/node-npmtest-easy-session/test.js":"/* istanbul instrument in package npmtest_easy_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easy-session/lib.npmtest_easy_session.js":"/* istanbul instrument in package npmtest_easy_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_easy_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_easy_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-easy-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-easy-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_easy_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_easy_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_easy_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_easy_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_easy_session.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_easy_session.__dirname + '/lib.npmtest_easy_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easy-session/node_modules/easy-session/index.js":"'use strict';\n\nvar RBAC = require('easy-rbac');\n\nmodule.exports.main = function easySessionMain(connect, opts) {\n\n    if(!connect) {\n        throw new TypeError('expected connect or express or express-session object as first argument');\n    }\n    var Session = connect.Session || connect.session.Session;\n\n    // Get options\n    opts = opts || {};\n    if(typeof opts !== 'object') {\n        throw new TypeError('expected an options object as second argument');\n    }\n\n\n    var ipCheck = opts.ipCheck === undefined ? true : !!opts.ipCheck;\n    var uaCheck = opts.uaCheck === undefined ? true : !!opts.uaCheck;\n    var freshTimeout = opts.freshTimeout || (5 * 60 * 1000);\n    var maxFreshTimeout = opts.maxFreshTimeout || (10 * 60 * 1000);\n    var rbac;\n    if(opts.rbac) {\n        rbac = new RBAC(opts.rbac);\n    }\n\n    // Extend the Session object\n\n    /**\n     * Function for logging the user in.\n     * Regenerates the session and adds _loggedInAt to the session object.\n     * Depending on the configuration also adds _ip and _ua for continuity checks.\n     * @param obj - optional properties to set on created session\n     * @param cb\n     */\n    Session.prototype.login = function login(role, extend, cb) {\n        if(typeof role === 'function') {\n            cb = role;\n            extend = false;\n            role = 'authenticated';\n        } else if (typeof role === 'object') {\n            cb = extend;\n            extend = role;\n            role = 'authenticated';\n        }\n        if(typeof extend === 'function') {\n            cb = extend;\n            extend = false;\n        } else if (extend && typeof extend !== 'object') {\n            throw new TypeError('Second parameter expected to be an object');\n        }\n\n        var req = this.req;\n        this.regenerate(function (err) {\n            if(err) {\n                cb(err);\n                return;\n            }\n            // Add logged in date\n            req.session._loggedInAt = Date.now();\n            req.session._lastRequestAt = Date.now();\n            req.session.setRole(role);\n\n            if(ipCheck) {\n                req.session._ip = req.ip;\n            }\n            if(uaCheck) {\n                req.session._ua = req.headers['user-agent'];\n            }\n            if(extend) {\n                Object.keys(extend).forEach(function (key) {\n                    req.session[key] = extend[key];\n                });\n            }\n            req.session.save();\n            cb();\n        });\n    };\n    /**\n     * Function for logging out the user.\n     * Is just a proxy for session regeneration.\n     * @param cb\n     * @returns {*}\n     */\n    Session.prototype.logout = function logout(cb) {\n        return this.regenerate(cb);\n    };\n\n    var oldResetMaxAge = Session.prototype.resetMaxAge;\n\n    Session.prototype.resetMaxAge = function resetMaxAge() {\n        this._lastRequestAt = Date.now();\n        return oldResetMaxAge.call(this);\n    };\n\n    /**\n     * Function for setting the last request for current moment\n     * @returns {*}\n     */\n    Session.prototype.setLastRequest = function setLastRequest() {\n        this._lastRequestAt = Date.now();\n    };\n\n    /**\n     * Function for checking if the user is a guest.\n     * Returns true if logged out, false if logged in.\n     * @returns {boolean}\n     */\n    Session.prototype.isGuest = function isGuest() {\n        return !this._loggedInAt; // If this is not set then we are not logged in\n    };\n\n    /**\n     * Function for checking if the user is logged in.\n     * Returns true if logged id, false if logged out.\n     *\n     * @param [optional] {string} - If present the user is also checked for the role\n     * @returns {boolean}\n     */\n    Session.prototype.isLoggedIn = function isLoggedIn(role) {\n        if(!role) {\n            return !this.isGuest();\n        }\n        return !this.isGuest() && this.hasRole(role);\n    };\n\n    /**\n     * Function for checking if the logged in session is fresh or stale.\n     * Returns true if fresh, false if stale.\n     * @returns {boolean}\n     */\n    Session.prototype.isFresh = function isFresh() {\n        if(!this._loggedInAt) {\n            return false;\n        }\n        var age = Date.now() - this._loggedInAt;\n        if(age > (maxFreshTimeout)) {\n            return false;\n        }\n        if(age < freshTimeout || (Date.now() - this._lastRequestAt) < (freshTimeout)) {\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * Function setting a role on the session\n     * @returns {boolean}\n     */\n    Session.prototype.setRole = function setRole(role) {\n        this._role = role;\n        return this;\n    };\n\n    /**\n     * Function getting a role from the session\n     * @returns {boolean}\n     */\n    Session.prototype.getRole = function getRole() {\n        return this._role || 'guest';\n    };\n\n    /**\n     * Function checking the session role\n     *\n     * returns true if given role matches the session role, false otherwise\n     * @returns {boolean}\n     */\n    Session.prototype.hasRole = function hasRole(role, reverse) {\n\n        if(reverse) {\n            return this.hasNotRole(role);\n        }\n\n        var current = this.getRole();\n        if(Array.isArray(role)) {\n            return role.indexOf(current) !== -1;\n        }\n\n        return current === role;\n    };\n\n    /**\n     * Function checking the session role not to match a set\n     *\n     * returns false if given role matches the session role, true otherwise\n     * @returns {boolean}\n     */\n    Session.prototype.hasNotRole = function hasNotRole(role) {\n        var current = this.getRole();\n        if(Array.isArray(role)) {\n            return role.indexOf(current) === -1;\n        }\n\n        return current !== role;\n    };\n\n    if(rbac) {\n        Session.prototype.can = function can(operation, params, cb) {\n            return rbac.can(this.getRole(), operation, params, cb);\n        };\n    }\n\n    /**\n     * Middleware for removing cookies from browser cache and\n     * depending on configuration checking if users IP and UA have changed mid session.\n     */\n    return function sessionMiddleware(req, res, next) {\n\n        // Remove cookies from cache - a security feature\n        res.header('Cache-Control', 'no-cache=\"Set-Cookie, Set-Cookie2\"');\n\n        if(!req.session) { // If there is no session then something is wrong\n            next(new Error('Session object missing'));\n            return;\n        }\n\n        function refresh(){\n            res.removeListener('finish', refresh);\n            res.removeListener('close', refresh);\n            req.session.setLastRequest();\n        }\n\n        res.on('finish', refresh);\n        res.on('close', refresh);\n\n        if(req.session.isGuest()) { // If not logged in then continue\n            next();\n            return;\n        }\n\n        if(ipCheck && req.session._ip !== req.ip) { // Check if IP matches\n            // It would be wise to log more information here to either notify the user or\n            // to try and prevent further attacks\n            console.warn('The request IP did not match session IP');\n\n            // Generate a new unauthenticated session\n            req.session.logout(next);\n            return;\n        }\n\n        if(uaCheck && req.session._ua !== req.headers['user-agent']) { // Check if UA matches\n            // It would be wise to log more information here to either notify the user or\n            // to try and prevent further attacks\n            console.warn('The request User Agent did not match session user agent');\n\n            // Generate a new unauthenticated session\n            req.session.logout(next);\n            return;\n        }\n        // Everything checks out so continue\n        next();\n    };\n\n};\n\n/**\n * An express/connect middleware for checking if the user is loggedIn\n * @param errorCallback\n * @returns {Function}\n */\nfunction isLoggedIn(errorCallback) {\n    return function (req, res, next) {\n        if(req.session.isLoggedIn()) {\n            next();\n            return;\n        }\n        if(errorCallback) {\n            errorCallback(req, res, next);\n            return;\n        }\n\n        (res.sendStatus || res.send).call(res, 401);\n    };\n}\nmodule.exports.isLoggedIn = isLoggedIn;\n\n/**\n * An express/connect middleware for checking if the user is loggedIn and session isFresh\n * @param errorCallback\n * @returns {Function}\n */\nfunction isFresh(errorCallback) {\n    return function (req, res, next) {\n        if(req.session.isFresh()) {\n            next();\n            return;\n        }\n        if(errorCallback) {\n            errorCallback(req, res, next);\n            return;\n        }\n\n        (res.sendStatus || res.send).call(res, 401);\n    };\n}\nmodule.exports.isFresh = isFresh;\n\n/**\n * An express/connect middleware for checking if the user is logged in and has\n * certain _role value\n *\n * @param role - role to check for\n * @param reverse - secondary parameter for hasRole\n * @param errorCallback\n * @returns {Function}\n */\nmodule.exports.checkRole = function checkRole(role, reverse, errorCallback) {\n    if(typeof reverse === 'function') {\n        errorCallback = reverse;\n        reverse = false;\n    }\n    return function (req, res, next) { // Check role\n        if(req.session.hasRole(role, reverse)) {\n            next();\n            return;\n        }\n        if(errorCallback) {\n            errorCallback(req, res, next);\n            return;\n        }\n\n        (res.sendStatus || res.send).call(res, 401);\n    };\n};\n\n/**\n * An express/connect middleware factory for checking if the is allowed for operation\n *\n * @param operation - operation to check for\n * @param params - secondary parameter for can\n * @param errorCallback\n * @returns {Function}\n */\nmodule.exports.can = function can(operation, params, errorCallback) {\n    if(typeof operation !== 'string') {\n        throw new TypeError('Expected first parameter to be string');\n    }\n    return function canAccess(req, res, next) {\n        var resultFn = function (err, can) {\n            if(err || !can) {\n                errFn();\n                return;\n            }\n            next();\n        };\n        var errFn = function () {\n            if(errorCallback) {\n                errorCallback(req, res, next);\n                return;\n            }\n\n            (res.sendStatus || res.send).call(res, 403);\n        };\n        if(typeof params === 'function') {\n            params(req, res, function (err, data) {\n                if(err) {\n                    errFn(new Error('RBAC check failed'));\n                    return;\n                }\n                req.session.can(operation, data, resultFn);\n            });\n            return;\n        }\n        req.session.can(operation, params, resultFn);\n    };\n};"}